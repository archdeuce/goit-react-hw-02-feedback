{"version":3,"sources":["components/Section/Section.js","components/Notification/Notification.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","App.js","reportWebVitals.js","index.js"],"names":["Section","title","children","className","Notification","this","props","message","Component","Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","index","id","name","value","type","onClick","App","state","feedbackChanged","newState","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","onChanged","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ee35e5b6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Section.css';\n\nconst Section = ({ title, children }) => (\n  <section className=\"Section__container\">\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.array.isRequired,\n};\n","import React, { Component } from 'react';\nimport './Notification.css';\nimport PropTypes from 'prop-types';\n\nclass Notification extends Component {\n  render() {\n    return (\n      <div className=\"Notification__container\">\n        <h3 className=\"Notification__title\">{this.props.message}</h3>\n      </div>\n    );\n  }\n}\n\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import React from 'react';\nimport './Statistics.css';\nimport Notification from '../Notification/';\nimport PropTypes from 'prop-types';\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <div className=\"Statistics__container\">\n      <h2>Statistics</h2>\n\n      {total === 0 ? (\n        <Notification message=\"No feedback given\" />\n      ) : (\n        <ul className=\"Statistics__list\">\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Good:</span>\n            <span className=\"Statistics__list-item-value\">{good}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Neutral:</span>\n            <span className=\"Statistics__list-item-value\">{neutral}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Bad:</span>\n            <span className=\"Statistics__list-item-value\">{bad}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">Total:</span>\n            <span className=\"Statistics__list-item-value\">{total}</span>\n          </li>\n          <li className=\"Statistics__list-item\">\n            <span className=\"Statistics__list-item-title\">\n              Positive feedback:\n            </span>\n            <span className=\"Statistics__list-item-value\">\n              {positivePercentage} %\n            </span>\n          </li>\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './FeedbackOptions.css';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <section>\n    <ul className=\"FeedbackOptions__buttons\">\n      {options.map(({ id, name, value }, index) => (\n        <li key={index} className=\"FeedbackOptions__buttons-item\">\n          <button\n            key={id}\n            className=\"FeedbackOptions__button\"\n            value={value}\n            type=\"button\"\n            onClick={() => onLeaveFeedback(value)}\n          >\n            {name}\n          </button>\n        </li>\n      ))}\n    </ul>\n  </section>\n);\n\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import { Component } from 'react';\nimport './App.css';\nimport Section from './components/Section/';\nimport Statistics from './components/Statistics/';\nimport FeedbackOptions from './components/FeedbackOptions/';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  feedbackChanged = newState => {\n    this.setState({ newState });\n  };\n\n  onLeaveFeedback = value => {\n    this.setState(prevState => {\n      return { [value]: prevState[value] + 1 };\n    });\n  };\n\n  countTotalFeedback = () => {\n    let { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    let { good, neutral, bad } = this.state;\n\n    return (good / (good + neutral + bad)) * 100;\n  };\n\n  render() {\n    const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positivePercentage = this.countPositiveFeedbackPercentage().toFixed(\n      0,\n    );\n\n    const options = [\n      { id: 'id-1', name: 'Good', value: 'good' },\n      { id: 'id-2', name: 'Neutral', value: 'neutral' },\n      { id: 'id-3', name: 'Bad', value: 'bad' },\n    ];\n\n    return (\n      <div className=\"App\">\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={options}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={positivePercentage}\n            onChanged={this.feedbackChanged}\n          />\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'modern-normalize/modern-normalize.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}